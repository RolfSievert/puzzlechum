#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8

"""
Provided a problem id, downloads tests and creates a test file if it doesn't exist already.
"""

import shutil
import requests
from pathlib import Path
import argparse
import zipfile

# Root folders
PROBLEMS_ROOT = Path(__file__).parent / 'problems'
TESTS_ROOT = Path(__file__).parent / 'tests'
TEMPLATES_ROOT = Path(__file__).parent / 'templates'

TEMPLATES = ['cpp', 'rs', 'py', 'js', 'ts', 'c', 'c#']

TESTS_URL = 'https://open.kattis.com/problems/{}/file/statement/samples.zip'

DEFAULT_LANGUAGE = TEMPLATES[0]

def parse_args():
    parser = argparse.ArgumentParser(
        prog='newproblem',
        description='Download given kattis test cases, creates problem folder, and copies problem template to that folder')

    parser.add_argument('problem_name', type=str, help='Kattis problem ID, check the url after \'problems/\'')
    parser.add_argument('--template', choices=TEMPLATES, default=DEFAULT_LANGUAGE, help='what template to use, must exist in \'templates/\' folder')

    return parser.parse_args()

def create_missing_folders(problem_name):
    if not PROBLEMS_ROOT.is_dir():
        PROBLEMS_ROOT.mkdir()

    if not TESTS_ROOT.is_dir():
        TESTS_ROOT.mkdir()

    if not TEMPLATES_ROOT.is_dir():
        TEMPLATES_ROOT.mkdir()

def problem_test_directory(problem_name):
    return TESTS_ROOT / problem_name

def download_tests(problem_name):
    tests_dir = problem_test_directory(problem_name)

    if tests_dir.is_dir():
        return False

    zip_path = Path('samples.zip')

    try:
        with open(zip_path, 'wb') as file:
            url = TESTS_URL.format(problem_name)
            response = requests.get(url)
            if response.status_code >= 400:
                raise Exception(response.reason)
            file.write(response.content)
    except:
        raise Exception('Could not download test samples! ' +
              f"Does '{problem_name}' really exist at kattis, and do you have an internet connection?")

    # extract sample input to tests folder
    f = zipfile.ZipFile(zip_path)

    tests_dir.mkdir()
    f.extractall(tests_dir)

    # remove zip
    Path(zip_path).unlink()

    return True

def create_problem_folders(problem_name):
    if not (PROBLEMS_ROOT / problem_name).is_dir():
        (PROBLEMS_ROOT / problem_name).mkdir()

def problem_path(problem_name, file_suffix):
    return PROBLEMS_ROOT / problem_name / f'{problem_name}.{file_suffix}'

def copy_template(template_suffix, destination):
    success = False
    problem_path = destination

    if not problem_path.is_file():
        template = TEMPLATES_ROOT / f'template.{template_suffix}'
        if not template.is_file():
            raise(f"Template '{template}' does not exist! Perhaps create one?")
        else:
            shutil.copyfile(template, problem_path)

        success = True

    return success

if __name__ == '__main__':
    args = parse_args()

    create_missing_folders(args.problem_name)
    create_problem_folders(args.problem_name)

    problem_file = problem_path(args.problem_name, args.template)
    template_success = copy_template(args.template, problem_file)

    if template_success:
        print(f'Copied template to \'{problem_file}\'')
    else:
        print(f'Problem already exists at {problem_file}')

    tests_success = download_tests(args.problem_name)
    if tests_success:
        print(f"Test samples successfully downloaded to '{problem_test_directory(args.problem_name)}'")
    else:
        print(f"Test samples already exists, skipping...")
